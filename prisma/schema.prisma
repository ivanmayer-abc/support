datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  surname       String?
  birth         DateTime?
  country       String?       @default("India")
  city          String?
  email         String?         @unique
  emailVerified DateTime?
  image         Image?
  isImageApproved   String    @default("none")
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean    @default(false)
  isBlocked Boolean @default(false)
  isChatBlocked Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  transactions  Transaction[]

  conversations Conversation[]
  messages Message[]

  books Book[]
  bets Bet[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Image {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum TransactionType {
  deposit
  withdrawal
}

enum TransactionStatus {
  success
  pending
  fail
}

model Transaction {
  id        String   @id @default(uuid())
  type      TransactionType
  amount    Decimal
  status    TransactionStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  description String?
  category     String?
  history TransactionHistory[]
  bets Bet[]

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TransactionHistory {
  id        String   @id @default(uuid())
  status    TransactionStatus
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
}

model Conversation {
  id        String @id @default(uuid())
  topic     String?
  lastMessageAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messageIds String[]
  messages   Message[]

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id        String @id @default(uuid())
  body      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  conversatioId String
  conversation Conversation @relation(fields: [conversatioId], references: [id])

  userId    String
  sender    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  isReadByAdmin  Boolean  @default(false)
  isReadByUser   Boolean  @default(false)

  @@index([userId])
}

enum BookStatus {
  ACTIVE
  INACTIVE
  SETTLED
  CANCELLED
}

enum EventStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum OutcomeResult {
  WIN
  LOSE
  VOID
  PENDING
}

model Book {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      BookStatus @default(ACTIVE)
  date        DateTime
  category    String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  events      Event[]
  bets        Bet[]
  teams       Team[]  @relation("BookTeams")
  
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Event {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  outcomes    Outcome[]
  bets        Bet[]
  
  bookId      String
  book        Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  homeTeamId  String?
  homeTeam    Team?     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  
  awayTeamId  String?
  awayTeam    Team?     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  
  isFirstFastOption  Boolean @default(false)
  isSecondFastOption Boolean @default(false)

  @@index([bookId])
}

model Outcome {
  id          String   @id @default(uuid())
  name        String
  odds        Float
  probability Float
  stake       Float   @default(0)
  result      OutcomeResult? @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bets        Bet[]
  
  eventId     String
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

enum BetStatus {
  PENDING
  WON
  LOST
  VOID
  CANCELLED
}

model Bet {
  id          String   @id @default(uuid())
  amount      Float
  potentialWin Float
  status      BetStatus @default(PENDING)
  odds        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settledAt   DateTime?
  
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  bookId      String
  book        Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  eventId     String
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  outcomeId   String
  outcome     Outcome @relation(fields: [outcomeId], references: [id], onDelete: Cascade)

  transactionId String?  @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  @@index([userId])
  @@index([bookId])
  @@index([eventId])
  @@index([outcomeId])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  image     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  homeEvents Event[] @relation("HomeTeam")
  awayEvents Event[] @relation("AwayTeam")
  
  bookId    String?
  book      Book?    @relation("BookTeams", fields: [bookId], references: [id])

  @@index([bookId])
}